import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-allopen:1.7.0"
    }
}
plugins {
//    id 'org.springframework.boot' version '3.1.4'
    id 'org.jetbrains.kotlin.jvm' version '1.9.10'
    id 'org.jetbrains.kotlin.plugin.jpa' version '1.3.31'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.31'
    id 'maven-publish'
    id 'java-library'
}

//apply plugin: 'io.spring.dependency-management'
apply plugin: 'kotlin-jpa'
apply plugin: 'kotlin-allopen'
apply plugin: 'java'

group = 'com.egstep'
version = '1.1.5'

java {
    sourceCompatibility = '17'
}
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

repositories {
    mavenCentral()
    maven {
        url "$project.nexusUrl/repository/maven-public/"
    }
}


dependencies {
    // spring
    implementation("org.springframework.boot:spring-boot-starter-parent:3.1.4")
    implementation("org.springframework.boot:spring-boot-starter:3.1.4")
    implementation("org.springframework.boot:spring-boot-starter-web:3.1.4")
    implementation("org.springframework.boot:spring-boot-starter-jdbc:3.1.4")
    implementation("org.springframework.boot:spring-boot-starter-aop:3.1.4")

    // kotlin
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation 'org.jetbrains.kotlin:kotlin-maven-allopen:1.7.0'

    // zfwk
    implementation 'com.egstep:zutils-kt:1.0.0-SNAPSHOT'

    // test
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '1.8'
}

sourceSets {
    main.java.srcDir "src/main/kotlin"
    main.resources.srcDir "src/main/resources"
}


jar {
    enabled = true
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = group
            artifactId = rootProject.name
            version = "$version"
            artifact("build/libs/$rootProject.name-$version" + ".jar") {
                extension 'jar'
            }
        }

    }
    repositories {
        maven {
            name = 'nexus'
            if (project.version.toString().endsWith("SNAPSHOT")) {
                url "$project.nexusUrl/repository/maven-snapshots/"
            } else {
                url "$project.nexusUrl/repository/maven-releases/"
            }
            credentials {
                username project.nexusUsername
                password project.nexusPassword
            }
        }
    }
}

tasks.withType(KotlinCompile) {
    kotlinOptions {
        freeCompilerArgs += '-Xjsr305=strict'
        jvmTarget = '17'
    }
}
